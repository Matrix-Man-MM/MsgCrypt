/*
#include "Main.h": This line includes the corresponding header file for the "Main" class. 
It ensures that the definitions in this implementation file match the declarations in the header file.

wxBEGIN_EVENT_TABLE(Main, wxFrame): This macro begins the event table for the "Main" class. 
It associates event handlers with specific events generated by the user interface elements of the class.

EVT_BUTTON(2000, OnButtonClicked): This macro binds the event handler OnButtonClicked to the button with the ID 2000. 
It means that when the button is clicked, the OnButtonClicked function will be executed.

wxEND_EVENT_TABLE(): This macro ends the event table for the "Main" class.

Main::Main() : wxFrame(nullptr, wxID_ANY, "Message Encryptor", wxDefaultPosition, wxSize(480, 256), wxDEFAULT_FRAME_STYLE^ wxRESIZE_BORDER^ wxMAXIMIZE_BOX): This is the implementation of the constructor for the "Main" class. 
It initializes the parent wxFrame object with the given parameters, such as the window title, position, size, and style. 
It also creates the text control widget (msgBox) and the button widget (encryptBtn) and positions them within the frame.

Center(): This function centers the frame on the screen.

Main::~Main(): This is the implementation of the destructor for the "Main" class. 
Since the definition is empty, it doesn't perform any specific cleanup or deallocation.

void Main::OnButtonClicked(wxCommandEvent& ev): This is the implementation of the event handler function OnButtonClicked. 
It is called when the button with the ID 2000 is clicked. In this implementation, the function performs the following steps:

a. It retrieves the text entered in the msgBox text control widget.

b. It defines the values for the encryption parameters p, q, e, and n.

c. It calls the Encrypt function with the text and encryption parameters to obtain the encrypted text.

d. It displays a message box with the encrypted text.

std::string Main::Encrypt(std::string text, int e, int n): This is the implementation of the Encrypt function. 
It takes a string parameter named text and two integer parameters named e and n. 
The function performs the encryption process on the provided text using the RSA encryption algorithm. 
It returns the encrypted text as a string.

The function calculates the number of bits required to represent a character (bitsPerChar) and the number of bits required to represent a block (bitsPerBlock) based on the value of n. 
It determines the block size based on the division of bitsPerBlock by bitsPerChar.

The function iterates through each character in the text and applies the encryption algorithm using the given encryption parameters. 
It stores the encrypted values in a vector block until the block size is reached. 
Then, it converts the block values to a Base64 representation and appends them to the encryptedText string.

If the remaining block size is less than the block size, it pads the block with zeros and performs the Base64 conversion.

Finally, it returns the encryptedText string.
*/

#include "Main.h"

wxBEGIN_EVENT_TABLE(Main, wxFrame)
EVT_BUTTON(2000, OnButtonClicked)
wxEND_EVENT_TABLE()

Main::Main() : wxFrame(nullptr, wxID_ANY, "Message Encryptor", wxDefaultPosition, wxSize(480, 256), wxDEFAULT_FRAME_STYLE^ wxRESIZE_BORDER^ wxMAXIMIZE_BOX) {
	Center();

	msgBox = new wxTextCtrl(this, 1000, wxEmptyString, wxPoint(20, 50), wxSize(425, 24));
	encryptBtn = new wxButton(this, 2000, "ENCRYPT", wxPoint(135, 100), wxSize(200, 50));
}

Main::~Main() {

}

void Main::OnButtonClicked(wxCommandEvent& ev) {
	std::string text = (std::string)msgBox->GetValue();

	int p = 3;
	int q = 11;
	int e = 7;
	int n = p * q;

	std::string encryptedText = Encrypt(text, e, n);
	
	wxMessageBox(encryptedText, "Message Encryptor", wxICON_WARNING);
}

std::string Main::Encrypt(std::string text, int e, int n)
{
	std::string encryptedText = "";

	int bitsPerChar = 8;
	int bitsPerBlock = static_cast<int>(ceil(log2(n)));
	int blockSize = static_cast<int>(ceil(static_cast<double>(bitsPerBlock) / bitsPerChar));

	std::vector<int> block;

	for (int i = 0; i < text.length(); i++) {
		int m = (int)text[i];
		int c = 1;

		for (int j = 0; j < e; j++)
			c = (c * m) % n;

		block.push_back(c);

		if (block.size() == blockSize) {
			int blockValue = 0;

			for (int j = 0; j < blockSize; j++)
				blockValue += block[j] * pow(2, bitsPerChar * j);

			while (blockValue > 0) {
				int index = blockValue % 64;
				encryptedText = base64_chars[index] + encryptedText;
				blockValue /= 64;
			}

			block.clear();
		}
	}

	if (block.size() > 0) {
		while (block.size() < blockSize)
			block.push_back(0);

		int blockValue = 0;

		for (int j = 0; j < blockSize; j++)
			blockValue += block[j] * pow(2, bitsPerChar * j);

		while (blockValue > 0) {
			int index = blockValue % 64;
			encryptedText = base64_chars[index] + encryptedText;
			blockValue /= 64;
		}
	}

	return encryptedText;
}
